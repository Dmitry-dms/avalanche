// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easyjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4a12ea29DecodeGithubComDmitryDmsAvalanchePkgSerializerEasyjson(in *jlexer.Lexer, out *CompanyStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "company_name":
			out.Name = string(in.String())
		case "online_users":
			out.OnlineUsers = uint(in.Uint())
		case "max_users":
			out.MaxUsers = uint(in.Uint())
		case "ttl":
			out.TTL = time.Duration(in.Int64())
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "stoped_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Stopped).UnmarshalJSON(data))
			}
		case "expired":
			out.Expired = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a12ea29EncodeGithubComDmitryDmsAvalanchePkgSerializerEasyjson(out *jwriter.Writer, in CompanyStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"company_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"online_users\":"
		out.RawString(prefix)
		out.Uint(uint(in.OnlineUsers))
	}
	{
		const prefix string = ",\"max_users\":"
		out.RawString(prefix)
		out.Uint(uint(in.MaxUsers))
	}
	{
		const prefix string = ",\"ttl\":"
		out.RawString(prefix)
		out.Int64(int64(in.TTL))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"stoped_time\":"
		out.RawString(prefix)
		out.Raw((in.Stopped).MarshalJSON())
	}
	{
		const prefix string = ",\"expired\":"
		out.RawString(prefix)
		out.Bool(bool(in.Expired))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompanyStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a12ea29EncodeGithubComDmitryDmsAvalanchePkgSerializerEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompanyStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a12ea29EncodeGithubComDmitryDmsAvalanchePkgSerializerEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompanyStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a12ea29DecodeGithubComDmitryDmsAvalanchePkgSerializerEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompanyStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a12ea29DecodeGithubComDmitryDmsAvalanchePkgSerializerEasyjson(l, v)
}
